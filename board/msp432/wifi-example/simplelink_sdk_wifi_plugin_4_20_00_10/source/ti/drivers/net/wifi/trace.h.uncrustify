/*
 * trace.h - CC31xx/CC32xx Host Driver Implementation
 *
 * Copyright (C) 2017 Texas Instruments Incorporated - http://www.ti.com/
 *
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <ti/drivers/net/wifi/simplelink.h>

#ifndef __SIMPLELINK_TRACE_H__
#define __SIMPLELINK_TRACE_H__

#ifdef  __cplusplus
extern "C" {
#endif

/*****************************************************************************/
/* Macro declarations                                                        */
/*****************************************************************************/

#define SL_SYNC_SCAN_THRESHOLD  (( _u32 )2000)

#define _SlDrvAssert() _SlDrvHandleFatalError( \
        SL_DEVICE_EVENT_FATAL_DRIVER_ABORT, 0, 0)

#define _SL_ASSERT(expr)              {if(!(expr)) { _SlDrvAssert();} \
}
#define _SL_ERROR(expr, error)        {if(!(expr)) {return (error);} \
}

#define _SL_ASSERT_ERROR(expr, \
                         error) {if(!(expr)) {_SlDrvAssert(); return (error);} \
}

#define SL_HANDLING_ASSERT          2
#define SL_HANDLING_ERROR           1
#define SL_HANDLING_NONE            0

#define SL_SELF_COND_HANDLING       SL_HANDLING_ASSERT
#define SL_PROTOCOL_HANDLING        SL_HANDLING_ASSERT
#define SL_DRV_RET_CODE_HANDLING    SL_HANDLING_ERROR
#define SL_NWP_IF_HANDLING          SL_HANDLING_ASSERT
#define SL_OSI_RET_OK_HANDLING      SL_HANDLING_ERROR
#define SL_MALLOC_OK_HANDLING       SL_HANDLING_ASSERT
#define SL_USER_ARGS_HANDLING       SL_HANDLING_ASSERT
#define SL_ERR_IN_PROGRESS_HANDLING SL_HANDLING_ERROR
#define SL_ERR_IN_API_ALLOWED       SL_HANDLING_ERROR
#define SL_LOCK_OK_HANDLING         SL_HANDLING_ASSERT

#if (SL_ERR_IN_PROGRESS_HANDLING == SL_HANDLING_ERROR)
#define VERIFY_NO_ERROR_HANDLING_IN_PROGRESS() { \
        if(SL_IS_RESTART_REQUIRED) {return SL_API_ABORTED;} \
}
#else
#define VERIFY_NO_ERROR_HANDLING_IN_PROGRESS()
#endif

#if (SL_ERR_IN_API_ALLOWED == SL_HANDLING_ERROR)
#define VERIFY_API_ALLOWED(Silo) { \
        _SlReturnVal_t status = _SlDrvDriverIsApiAllowed(Silo); \
        if(status) {return status;}